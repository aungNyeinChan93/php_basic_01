1. htmlspecialchars:
Converts special characters to their corresponding HTML entities.
Commonly used to escape user input before displaying it in HTML to prevent cross-site scripting
(XSS) attacks.
Escapes characters like <, >, &, and quotes (" and ').
Example usage:
$escaped = htmlspecialchars($input, ENT_QUOTES, 'UTF-8');
2. filter_var:
A more versatile function that goes beyond HTML escaping.
Part of the Filter extension, which is enabled by default since PHP 5.2.
Allows developers to use the same filter method with different arguments for various kinds of filtering
and sanitization.
Not limited to HTML escaping; can validate and sanitize data for various purposes (e.g., validating
email addresses, filtering integers, etc.).
Example usage for HTML escaping:
$escaped = filter_var($input, FILTER_SANITIZE_FULL_SPECIAL_CHARS);
3. Why choose one over the other?
htmlspecialchars is straightforward and commonly used for HTML escaping.
filter_var provides more flexibility but may not be as widely adopted due to its late introduction
(since PHP 5.2).
If you only need HTML escaping, htmlspecialchars is sufficient. For other filtering tasks, consider
using filter_var.

**************************************************************************************************
Both FILTER_SANITIZE_STRING and htmlspecialchars() are used for sanitizing strings in PHP, but they serve
different purposes:
1. FILTER_SANITIZE_STRING:
Removes tags and encodes special characters from a string.
Deprecated in PHP 8.1.0.
Recommended alternative: Use htmlspecialchars() or FILTER_SANITIZE_FULL_SPECIAL_CHARS.
Example:
$string = '<p>Some HTML content</p>';
$filtered = filter_var($string, FILTER_SANITIZE_STRING);
2. htmlspecialchars():
Converts special characters to their corresponding HTML entities.
Commonly used to prevent cross-site scripting (XSS) attacks.
Example:
$string = '<h2>Some heading</h2>';
$encoded = htmlspecialchars($string, ENT_QUOTES);